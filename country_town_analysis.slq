WITH town_revenue AS (
    SELECT 
        country,
        town,
        ROUND(SUM(product_price), 2) as total_revenue,
        COUNT(DISTINCT orderid) as total_orders,
        COUNT(*) as total_items
    FROM tableA
    GROUP BY country, town
),
country_totals AS (
    SELECT 
        country,
        SUM(total_revenue) as country_total_revenue
    FROM town_revenue
    GROUP BY country
)
SELECT 
    t.*,
    ROUND(t.total_revenue/t.total_orders, 2) as avg_order_value,
    ROUND(t.total_revenue * 100.0 / c.country_total_revenue, 2) as revenue_percentage
FROM town_revenue t
JOIN country_totals c ON t.country = c.country
ORDER BY t.country, t.total_revenue DESC;
------------------------------------

def plot_country_revenue(data, country_name):
        # Sort by revenue
        data_sorted = data.sort_values('revenue_percentage', ascending=True)
        
        # Create figure with multiple subplots
        fig = plt.figure(figsize=(15, 15))
        gs = fig.add_gridspec(3, 1, height_ratios=[2, 1, 1])
        
        # Revenue percentage horizontal bar chart
        ax1 = fig.add_subplot(gs[0])
        bars = ax1.barh(data_sorted['town'], data_sorted['revenue_percentage'])
        ax1.set_xlabel('Revenue Percentage (%)')
        ax1.set_ylabel('Town')
        ax1.set_title(f'Revenue Distribution by Town - {country_name}')
        
        # Add percentage labels
        for bar in bars:
            width = bar.get_width()
            ax1.text(width, bar.get_y() + bar.get_height()/2, 
                    f'{width:.1f}%', va='center')

        # Cumulative percentage plot
        ax2 = fig.add_subplot(gs[1])
        data_sorted['cumulative_percentage'] = data_sorted['revenue_percentage'].cumsum()
        ax2.plot(range(len(data_sorted)), data_sorted['cumulative_percentage'], 
                marker='o', color='red')
        ax2.set_xlabel('Number of Towns')
        ax2.set_ylabel('Cumulative Revenue %')
        ax2.set_title('Revenue Concentration')
        ax2.grid(True)
        
        # Add reference lines at 80% and 50%
        ax2.axhline(y=80, color='g', linestyle='--', alpha=0.5)
        ax2.axhline(y=50, color='b', linestyle='--', alpha=0.5)

        # Scatter plot of orders vs revenue percentage
        ax3 = fig.add_subplot(gs[2])
        scatter = ax3.scatter(data_sorted['total_orders'], 
                            data_sorted['revenue_percentage'],
                            alpha=0.6)
        ax3.set_xlabel('Number of Orders')
        ax3.set_ylabel('Revenue Percentage (%)')
        ax3.set_title('Orders vs Revenue Percentage')
        
        # Add town labels to top 5 points
        top_5 = data_sorted.nlargest(5, 'revenue_percentage')
        for idx, row in top_5.iterrows():
            ax3.annotate(row['town'], 
                        (row['total_orders'], row['revenue_percentage']),
                        xytext=(5, 5), textcoords='offset points')

        # Add statistics
        stats_text = (
            f'Total Revenue: ${data["total_revenue"].sum():,.2f}\n'
            f'Number of Towns: {len(data):,}\n'
            f'Top 3 Towns: {", ".join(data_sorted.nlargest(3, "revenue_percentage")["town"].values)}\n'
            f'Top 20% Towns Revenue: {data_sorted.nlargest(len(data)//5, "revenue_percentage")["revenue_percentage"].sum():.1f}%\n'
            f'Median Town Revenue: {data_sorted["revenue_percentage"].median():.2f}%'
        )
        
        plt.figtext(0.02, 0.02, stats_text, 
                    bbox=dict(facecolor='white', alpha=0.8))
        
        plt.tight_layout()
        return fig

    # Analyze and plot for each country
    for country in revenue_by_town['country'].unique():
        country_data = revenue_by_town[revenue_by_town['country'] == country].copy()
        
        # Sort towns by revenue percentage
        country_data = country_data.sort_values('revenue_percentage', ascending=False)
        
        # Create visualization
        fig = plot_country_revenue(country_data, country)
        plt.show()
        
        # Print detailed statistics
        print(f"\nDetailed Statistics for {country}")
        print("=" * 80)
        
        print("\nTop 10 Towns by Revenue:")
        print(country_data.head(10)[['town', 'total_revenue', 'revenue_percentage', 
                                   'total_orders', 'avg_order_value']]
              .to_string(index=False))
        
        # Calculate concentration metrics
        percentiles = [20, 50, 80]
        n_towns = len(country_data)
        
        print("\nRevenue Concentration:")
        for p in percentiles:
            n_towns_p = int(n_towns * p/100)
            revenue_p = country_data.head(n_towns_p)['revenue_percentage'].sum()
            print(f"Top {p}% of towns ({n_towns_p} towns) account for {revenue_p:.1f}% of revenue")
        
        print("\n" + "=" * 80)

    return revenue_by_town


----------------------------------------------------------------
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

def plot_revenue_analysis(df, country_name, title_prefix='Revenue Analysis'):
    # Filter data for the specified country
    country_df = df[df['country'] == country_name]
    
    if country_df.empty:
        print(f"No data available for {country_name}")
        return

    # Calculate total revenue and percentages for the selected country
    total_revenue = country_df['total_revenue'].sum()
    country_df['revenue_percentage'] = (country_df['total_revenue'] / total_revenue) * 100
    country_df = country_df.sort_values('revenue_percentage', ascending=True)
    country_df['cumulative_percentage'] = country_df['revenue_percentage'].cumsum()

    # Create figure with subplots
    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(15, 15), height_ratios=[2, 1, 1])
    fig.suptitle(f"{title_prefix} for {country_name}", fontsize=16, y=0.95)

    # 1. Horizontal Bar Chart of Revenue Percentages
    bars = ax1.barh(country_df['town'], country_df['revenue_percentage'], color='skyblue')
    ax1.set_xlabel('Revenue Percentage (%)')
    ax1.set_ylabel('Town')
    ax1.set_title('Revenue Distribution by Town')

    for bar in bars:
        width = bar.get_width()
        ax1.text(width, bar.get_y() + bar.get_height()/2,
                 f'{width:.1f}%', va='center', ha='left', fontsize=10)

    # 2. Cumulative Revenue Concentration Curve
    ax2.plot(range(1, len(country_df) + 1), country_df['cumulative_percentage'],
             marker='o', color='red', linewidth=2)
    ax2.set_xlabel('Number of Towns')
    ax2.set_ylabel('Cumulative Revenue %')
    ax2.set_title('Revenue Concentration (Pareto Analysis)')
    ax2.grid(True, linestyle='--', alpha=0.7)

    ax2.axhline(y=80, color='green', linestyle='--', alpha=0.5, label='80% Revenue')
    ax2.axhline(y=50, color='blue', linestyle='--', alpha=0.5, label='50% Revenue')
    ax2.legend()

    for i, row in country_df.iterrows():
        ax2.annotate(f'{row["cumulative_percentage"]:.1f}%',
                     (i + 1, row['cumulative_percentage']),
                     xytext=(5, 5), textcoords='offset points', fontsize=8)

    # 3. Scatter Plot of Orders vs Revenue Percentage
    ax3.scatter(country_df['total_orders'], country_df['revenue_percentage'],
                alpha=0.6, c='purple', s=100)
    ax3.set_xlabel('Number of Orders')
    ax3.set_ylabel('Revenue Percentage (%)')
    ax3.set_title('Orders vs Revenue Percentage')
    ax3.grid(True, linestyle='--', alpha=0.7)

    for i, row in country_df.iterrows():
        ax3.annotate(row['town'],
                     (row['total_orders'], row['revenue_percentage']),
                     xytext=(5, 5), textcoords='offset points', fontsize=8)

    # Add statistics textbox
    stats_text = (
        f'Number of Towns: {len(country_df)}\n'
        f'Top Town: {country_df.iloc[-1]["town"]} ({country_df.iloc[-1]["revenue_percentage"]:.1f}%)\n'
        f'Median Revenue %: {country_df["revenue_percentage"].median():.1f}%\n'
        f'Top 20% Towns Revenue: {country_df.nlargest(2, "revenue_percentage")["revenue_percentage"].sum():.1f}%'
    )

    plt.figtext(0.02, 0.02, stats_text,
                bbox=dict(facecolor='white', alpha=0.8, edgecolor='gray'),
                fontsize=10)

    plt.tight_layout()
    plt.show()

# Call the function with your dataframe and a specific country name
plot_revenue_analysis(df=country_revenue_df, country_name='Sweden', title_prefix='Revenue Analysis')

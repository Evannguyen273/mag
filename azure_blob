from azure.storage.blob import ContainerClient, BlobServiceClient
from urllib.parse import urlparse
import os
from dotenv import load_dotenv
from datetime import datetime

load_dotenv()

class AzureBlobStorageService:
    def __init__(self):
        sas_url = os.environ.get("container_sas_url")
        sasUrlParts = urlparse(sas_url)
        self.accountEndpoint = sasUrlParts.scheme + '://' + sasUrlParts.netloc
        self.sasToken = sasUrlParts.query
        pathParts = sasUrlParts.path.split('/')
        self.containerName = pathParts[1]
        self.container_client = ContainerClient(self.accountEndpoint, self.containerName, self.sasToken)
        self.blob_service_client = BlobServiceClient(account_url=self.accountEndpoint, credential=self.sasToken)

    def get_table_scheme(self, table_name: str) -> str:
        """This function retrieves the guidelines from the Azure blob storage"""
        blob_client = self.container_client.get_blob_client(table_name)
        downloaded_blob = blob_client.download_blob()
        blob_content = downloaded_blob.readall().decode("utf-8")
        return blob_content

    def create_container(self, container_name: str) -> str:
        """Create a container if it doesn't exist"""
        container_client = self.blob_service_client.get_container_client(container_name)
        if not container_client.exists():
            container_client.create_container()
            return f"Container '{container_name}' created successfully."
        else:
            return f"Container '{container_name}' already exists."

    def upload_file(self, file_path: str, container_name: str, user_prompt: str) -> str:
        """Upload a file to a specific container and virtual directory"""
        # Ensure the container exists
        self.create_container(container_name)
        
        # Generate the virtual directory name
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        virtual_directory = f"{user_prompt}_{timestamp}"
        
        # Get the file name from the file path
        file_name = os.path.basename(file_path)
        
        # Create the blob name (virtual directory + file name)
        blob_name = f"{virtual_directory}/{file_name}"
        
        # Get the blob client
        blob_client = self.blob_service_client.get_blob_client(container=container_name, blob=blob_name)
        
        # Upload the file
        with open(file_path, "rb") as data:
            blob_client.upload_blob(data, overwrite=True)
        
        return f"File uploaded successfully to {blob_name} in container {container_name}."

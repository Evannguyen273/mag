import asyncio
from azure.storage.blob.aio import BlobServiceClient
from azure.core.exceptions import ResourceExistsError
from urllib.parse import urlparse
import os
from datetime import datetime

class AsyncAzureBlobStorageService:
    def __init__(self):
        sas_url = os.environ.get("container_sas_url")
        sasUrlParts = urlparse(sas_url)
        self.accountEndpoint = f"{sasUrlParts.scheme}://{sasUrlParts.netloc}"
        self.sasToken = sasUrlParts.query
        pathParts = sasUrlParts.path.split('/')
        self.containerName = pathParts[1]
        self.blob_service_client = BlobServiceClient(account_url=self.accountEndpoint, credential=self.sasToken)

    async def create_container(self, container_name: str) -> str:
        async with self.blob_service_client.get_container_client(container_name) as container_client:
            try:
                await container_client.create_container()
                return f"Container '{container_name}' created successfully."
            except ResourceExistsError:
                return f"Container '{container_name}' already exists."

    def get_txt_files(self, folder_path: str) -> list:
        return [os.path.join(folder_path, f) for f in os.listdir(folder_path) if f.endswith(".txt")]

    async def upload_file(self, file_path: str, container_name: str, blob_name: str) -> str:
        async with self.blob_service_client.get_container_client(container_name) as container_client:
            blob_client = container_client.get_blob_client(blob_name)
            with open(file_path, 'rb') as data:
                await blob_client.upload_blob(data.read(), overwrite=True)
        return blob_name

    async def upload_files(self, folder_path: str, container_name: str, user_prompt: str) -> list:
        await self.create_container(container_name)
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        virtual_directory = f"{user_prompt}_{timestamp}"
        txt_files = self.get_txt_files(folder_path)
        tasks = [self.upload_file(file_path, container_name, f"{virtual_directory}/{os.path.basename(file_path)}") 
                 for file_path in txt_files]
        return await asyncio.gather(*tasks)

# Example usage
async def main():
    azure_service = AsyncAzureBlobStorageService()
    folder_path = "Prompt_Templates"
    container_name = "my_container"
    user_prompt = "templates_upload"
    
    uploaded_files = await azure_service.upload_files(folder_path, container_name, user_prompt)
    print(f"Uploaded files: {uploaded_files}")

if __name__ == "__main__":
    asyncio.run(main())

WITH product_metrics AS (
    SELECT 
        product_name,
        COUNT(DISTINCT orderid) as total_orders,
        SUM(CAST(product_price AS FLOAT64)) as total_revenue,
        AVG(IF(is_short_pick = 'Y', 1, 0)) * 100 as short_pick_rate,
        AVG(IF(is_zero_pick = 'Y', 1, 0)) * 100 as zero_pick_rate,
        AVG(IF(is_on_time = 'Y', 1, 0)) * 100 as on_time_rate,
        AVG(IF(is_delivery_failure = 'Y', 1, 0)) * 100 as delivery_failure_rate,
        AVG(CAST(product_price AS FLOAT64)) as avg_price
    FROM orders
    WHERE product_price IS NOT NULL
      AND product_name IS NOT NULL
    GROUP BY product_name
    HAVING COUNT(DISTINCT orderid) >= 100
),
total_rev AS (
    SELECT 
        SUM(CAST(product_price AS FLOAT64)) as total_company_revenue
    FROM orders
    WHERE product_price IS NOT NULL  -- Include only valid prices
      AND product_name IS NOT NULL   -- Include only valid products
)
SELECT 
    p.*,
    ROUND((p.total_revenue / NULLIF(t.total_company_revenue, 0) * 100), 2) as revenue_percentage,
    ROW_NUMBER() OVER (ORDER BY p.total_revenue DESC) as revenue_rank
FROM product_metrics p
CROSS JOIN total_rev t
WHERE p.total_orders >= 100
ORDER BY p.total_revenue DESC
LIMIT 20;



import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Assuming your data is in a DataFrame called 'df'
# If not, create DataFrame from your data first

def analyze_top_products(df):
    plt.style.use('seaborn')
    fig = plt.figure(figsize=(20, 25))
    
    # 1. Revenue Contribution and Delivery Success
    ax1 = plt.subplot(3, 1, 1)
    x = range(len(df))
    width = 0.35
    
    # Revenue percentage bars
    bars = ax1.bar(x, df['revenue_percentage'], width, label='Revenue %', color='skyblue')
    ax1.set_ylabel('Revenue Percentage (%)', color='darkblue', fontsize=10)
    ax1.tick_params(axis='y', labelcolor='darkblue')
    
    # On-time rate line on secondary axis
    ax2 = ax1.twinx()
    line = ax2.plot(x, df['on_time_rate'], color='red', linewidth=2, label='On-time Rate %', marker='o')
    ax2.set_ylabel('On-time Delivery Rate (%)', color='red', fontsize=10)
    ax2.tick_params(axis='y', labelcolor='red')
    
    # Formatting
    plt.title('Revenue Contribution and Delivery Performance by Product', pad=20, fontsize=14)
    ax1.set_xticks(x)
    ax1.set_xticklabels(df['product_name'], rotation=45, ha='right')
    
    # Combine legends
    lines = bars.get_children()[:1] + line
    labels = ['Revenue %', 'On-time Rate %']
    ax1.legend(lines, labels, loc='upper right')
    
    # 2. Delivery Issues Matrix
    ax3 = plt.subplot(3, 1, 2)
    scatter = ax3.scatter(df['short_pick_rate'], 
                         df['delivery_failure_rate'],
                         s=df['total_orders']/30,  # Adjust size scaling as needed
                         c=df['revenue_percentage'],
                         cmap='YlOrRd',
                         alpha=0.7)
    
    # Add labels for each point
    for idx, row in df.iterrows():
        ax3.annotate(row['product_name'][:15] + '...',
                    (row['short_pick_rate'], row['delivery_failure_rate']),
                    xytext=(5, 5), textcoords='offset points',
                    fontsize=8)
    
    ax3.set_xlabel('Short Pick Rate (%)', fontsize=10)
    ax3.set_ylabel('Delivery Failure Rate (%)', fontsize=10)
    ax3.set_title('Delivery Performance Matrix\n(Size: Order Volume, Color: Revenue %)', pad=20, fontsize=14)
    plt.colorbar(scatter, label='Revenue %')
    
    # 3. Volume vs Success Rate
    ax4 = plt.subplot(3, 1, 3)
    scatter2 = ax4.scatter(df['total_orders'],
                          df['on_time_rate'],
                          s=df['revenue_percentage']*50,  # Adjust size scaling as needed
                          c=df['avg_price'],
                          cmap='viridis',
                          alpha=0.7)
    
    # Add labels for each point
    for idx, row in df.iterrows():
        ax4.annotate(row['product_name'][:15] + '...',
                    (row['total_orders'], row['on_time_rate']),
                    xytext=(5, 5), textcoords='offset points',
                    fontsize=8)
    
    ax4.set_xlabel('Total Orders', fontsize=10)
    ax4.set_ylabel('On-time Rate (%)', fontsize=10)
    ax4.set_title('Order Volume vs Delivery Success\n(Size: Revenue %, Color: Average Price)', pad=20, fontsize=14)
    plt.colorbar(scatter2, label='Average Price')
    
    plt.tight_layout()
    plt.show()
    
    # Print summary statistics
    print("\nSummary Statistics:")
    print(f"Average On-time Rate: {df['on_time_rate'].mean():.2f}%")
    print(f"Average Short Pick Rate: {df['short_pick_rate'].mean():.2f}%")
    print(f"Average Delivery Failure Rate: {df['delivery_failure_rate'].mean():.2f}%")
    print(f"\nTotal Revenue Contribution of Top 20 Products: {df['revenue_percentage'].sum():.2f}%")

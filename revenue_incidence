-- 1. Identify bestsellers and their delivery metrics
WITH bestsellers AS (
    SELECT 
        product_name,
        COUNT(DISTINCT orderid) as total_orders,
        SUM(CAST(product_price AS FLOAT64)) as total_revenue,
        AVG(IF(is_short_pick = 'Y', 1, 0)) * 100 as short_pick_rate,
        AVG(IF(is_zero_pick = 'Y', 1, 0)) * 100 as zero_pick_rate,
        AVG(IF(is_on_time = 'Y', 1, 0)) * 100 as on_time_rate,
        AVG(IF(is_delivery_failure = 'Y', 1, 0)) * 100 as delivery_failure_rate,
        AVG(CAST(product_price AS FLOAT64)) as avg_price
    FROM orders
    WHERE product_price IS NOT NULL
      AND product_name IS NOT NULL
    GROUP BY product_name
    HAVING COUNT(DISTINCT orderid) >= 100
)
SELECT 
    *,
    ROW_NUMBER() OVER (ORDER BY total_revenue DESC) as revenue_rank
FROM bestsellers
WHERE total_orders >= 100
ORDER BY total_revenue DESC
LIMIT 20;

-- 2. Daily delivery performance for top products
WITH top_products AS (
    SELECT product_name
    FROM orders
    GROUP BY product_name
    ORDER BY SUM(CAST(product_price AS FLOAT64)) DESC
    LIMIT 20
)
SELECT 
    DATE(order_day) as order_date,
    product_name,
    COUNT(DISTINCT orderid) as daily_orders,
    AVG(IF(is_short_pick = 'Y', 1, 0)) * 100 as short_pick_rate,
    AVG(IF(is_zero_pick = 'Y', 1, 0)) * 100 as zero_pick_rate,
    AVG(IF(is_on_time = 'Y', 1, 0)) * 100 as on_time_rate,
    AVG(IF(is_delivery_failure = 'Y', 1, 0)) * 100 as failure_rate,
    SUM(CAST(product_price AS FLOAT64)) as daily_revenue,
    AVG(CAST(product_price AS FLOAT64)) as avg_price
FROM orders
WHERE product_name IN (SELECT product_name FROM top_products)
GROUP BY DATE(order_day), product_name
ORDER BY order_date;

-- 3. Delivery performance by carrier for bestsellers
WITH top_products AS (
    SELECT product_name
    FROM orders
    GROUP BY product_name
    ORDER BY SUM(CAST(product_price AS FLOAT64)) DESC
    LIMIT 20
)
SELECT 
    carrier,
    COUNT(DISTINCT orderid) as total_deliveries,
    AVG(IF(is_on_time = 'Y', 1, 0)) * 100 as on_time_rate,
    AVG(IF(is_delivery_failure = 'Y', 1, 0)) * 100 as failure_rate,
    AVG(IF(is_short_pick = 'Y', 1, 0)) * 100 as short_pick_rate,
    AVG(CAST(product_price AS FLOAT64)) as avg_price,
    SUM(CAST(product_price AS FLOAT64)) as total_revenue
FROM orders
WHERE product_name IN (SELECT product_name FROM top_products)
GROUP BY carrier
HAVING COUNT(DISTINCT orderid) >= 50
ORDER BY total_deliveries DESC;

-- 4. Weekly trend analysis for delivery issues
SELECT 
    DATE_TRUNC(order_day, WEEK) as week,
    COUNT(DISTINCT orderid) as total_orders,
    AVG(IF(is_short_pick = 'Y', 1, 0)) * 100 as short_pick_rate,
    AVG(IF(is_zero_pick = 'Y', 1, 0)) * 100 as zero_pick_rate,
    AVG(IF(is_on_time = 'Y', 1, 0)) * 100 as on_time_rate,
    AVG(IF(is_delivery_failure = 'Y', 1, 0)) * 100 as failure_rate,
    SUM(CAST(product_price AS FLOAT64)) as weekly_revenue,
    AVG(CAST(product_price AS FLOAT64)) as avg_price
FROM orders
WHERE product_name IN (
    SELECT product_name
    FROM orders
    GROUP BY product_name
    ORDER BY SUM(CAST(product_price AS FLOAT64)) DESC
    LIMIT 20
)
GROUP BY DATE_TRUNC(order_day, WEEK)
ORDER BY week;

-- 5. Additional analysis: Price range impact on delivery
WITH price_ranges AS (
    SELECT 
        product_name,
        CASE 
            WHEN CAST(product_price AS FLOAT64) < 100 THEN 'Low (<100)'
            WHEN CAST(product_price AS FLOAT64) < 500 THEN 'Medium (100-500)'
            ELSE 'High (>500)'
        END as price_range,
        is_short_pick,
        is_zero_pick,
        is_on_time,
        is_delivery_failure
    FROM orders
    WHERE product_price IS NOT NULL
)
SELECT 
    price_range,
    COUNT(DISTINCT orderid) as total_orders,
    AVG(IF(is_short_pick = 'Y', 1, 0)) * 100 as short_pick_rate,
    AVG(IF(is_zero_pick = 'Y', 1, 0)) * 100 as zero_pick_rate,
    AVG(IF(is_on_time = 'Y', 1, 0)) * 100 as on_time_rate,
    AVG(IF(is_delivery_failure = 'Y', 1, 0)) * 100 as failure_rate
FROM price_ranges
GROUP BY price_range
ORDER BY 
    CASE price_range
        WHEN 'Low (<100)' THEN 1
        WHEN 'Medium (100-500)' THEN 2
        WHEN 'High (>500)' THEN 3
    END;
